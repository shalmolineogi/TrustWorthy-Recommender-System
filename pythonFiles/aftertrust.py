# -*- coding: utf-8 -*-
"""AfterTrust.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XDK5C3q1oNYPTXvniOXdk_MpGovKT9MT
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

TrustMatrix = pd.read_csv('/content/drive/My Drive/FinalYearProj-2020/csvFiles/TrustMatrix.csv',index_col = 0)
TrustMatrix.index.name = 'userIdRow'
TrustMatrix.columns.name = 'userIdCol'
TrustMatrix.head()

def similarity(user1, user2):
  print(user1)
  print(user2)
  trust=0
  d = 1 - (abs(user1-user2))/10
  d = d.dropna()
  print(len(d))
  if (len(d)!= 0):
      trust = sum(d) / len(d)
  # print(trust)
  # a[i][j] = trust
  # a[j][i] = trust
  return trust

def findSimilerUser(targetUser, k_neighbours):
  # targetUser = TrustMatrix.index[query_index]
  similar = TrustMatrix[str(targetUser)].sort_values(ascending=False).head(k_neighbours)
  print(similar)
  return similar.keys()

print(TrustMatrix['254'][2276])

UserBookRating = pd.read_csv('/content/drive/My Drive/FinalYearProj-2020/csvFiles/UserBookRating.csv',index_col=0)
UserBookRating.index.name = 'userID'
UserBookRating.columns.name = 'BookTitle'

UserBookRating.keys()

#implementing knn
# from sklearn.neighbors import NearestNeighbors
# model_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
# model_knn.fit(TrustMatrix)

query_index = 180
# query_index = np.random.choice(TrustMatrix.shape[1])
print('Randomly selected index is ',query_index)
# distances, indices = model_knn.kneighbors(TrustMatrix.iloc[query_index,:].values.reshape(1,-1), n_neighbors=4)

# similaruser = []
# for i in range(0, len(distances.flatten())):
#     if i==0:
#         targetUser = TrustMatrix.index[query_index]
#         print('Target user is {0}:\n'.format(targetUser))
#     else:
#         similaruser.append(TrustMatrix.index[indices.flatten()[i]])
#         print('{0}: UserID {1}, similarity value of {2}:'.format(i,TrustMatrix.index[indices.flatten()[i]], distances.flatten()[i]))
# print(similaruser)

#  # find most trusted users
# def findSimilerUser(targetUser, k_neighbours)
#   # targetUser = TrustMatrix.index[query_index]
#   similar = TrustMatrix[str(targetUser)].sort_values(ascending=False).head(k_neighbours)
#   return similar

target = TrustMatrix.index[query_index]
simileruser = findSimilerUser(target, 200)
print(simileruser)
# for i in simileruser:
#   print( "target {0} => similar {1} :".format(targetUser,i), end='')
#   print(TrustMatrix[str(targetUser)][i])

SimilarUserTable = (UserBookRating.loc[simileruser]).transpose()
# SimilarUserTable = SimilarUserTable.dropna()
SimilarUserTable.head(10)

SimilarUserTable['Average'] = pd.DataFrame(SimilarUserTable.mean(axis = 1))
avgAll = SimilarUserTable['Average'];
# print(avgAll.sort_values(ascending=False))
print(similarity(UserBookRating.loc[targetUser], avgAll))
# SimilarUserTable.head(10)

SimilarUserTable.sort_values(by = 'Average',ascending=False)

# from scipy.sparse import csr_matrix
# us_canada_user_rating_pivot_transpose = UserBookRating.transpose().fillna(0)
# us_canada_user_rating_matrix = csr_matrix(UserBookRating.fillna(0).values)

# # implementing knn
# from sklearn.neighbors import NearestNeighbors
# model_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
# model_knn.fit(us_canada_user_rating_matrix)

print(UserBookRating)

print(us_canada_user_rating_matrix.keys())

distances, indices = model_knn.kneighbors(UserBookRating.fillna(0).iloc[query_index,:].values.reshape(1,-1), n_neighbors=4)

print(distances, indices)



